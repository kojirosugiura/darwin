Commands
=======

newproj
-------

Create new project.

	<Project Name>/
		+---<Project Name>.garnet_proj.txt
		+---<Project Name>.garnet_conf.txt
		+---images/
		|   +---Copy image files here.
		+---reports/

### Options
* [project file]
* --max-generation -G <max generation>
	* 1 .. g: Set the max generation. If not set, the value specified by the configuration file will be used.
* --random-cases -S <the number of random cases>
	* 1 .. r: Make multiple cases with different initial random seed. default is 1.
* --cross-validation -K <the number of cross validation>
	* 0 (default): Use Task.
	* 1 .. k: All Tasks and Tests are used for k-fold cross validation.
* --directory  -d <directory>
	* Specify the name of the project directory.
	* If not set, the file name (without path and extension) of the configuration file will be used.
	
### Flow

1. Load a case configuration file.
2. Create project configurations with command line arguments.
	* _RandomCases
	* _MaxGeneration
	* _CrossValidation
3. Create directories.
	* Error if the directory already exists, 
	2.1 Create the project directory.
	2.2 Create the image directory.
	2.3 Create the reports directory.
3. Copy images to <proj>/images/ directory.
4. Create cases. (with overriding Random, Cross Validation)
	* Following configurations for each case should be modified from the original configuration.
		* Case name, like r00k00.
		* Random seed.
		* Image path.
	* Case configurations will contain Alias and Unit parameters originally specified by separate files.
	* Creation should be done with 'newcase' command.
5. Save the project configuration.
6. Done.


newcase
-------

Create new case.

	<Case name>/
		+---<Case name>.garnet_conf.txt
		+---reports/

### Options
* <project file>
* --max-generation -G <max generation>
	* 1 .. g: Set the max generation. If not set, the value specified by the configuration file will be used.
* --random-seed -s <Random seed>
	* seed: Set random seed. If not set, the value specified by the configuration file will be used.
* --directory -d <directory>
	* Specify the name of the project directory.
	* If not set, the file name (without path and extension) of the configuration file will be used.
	
### Flow

1. Load a configuration file.
2. Override configurations by command line arguments.
	* _RandomSeed
	* _MaxGeneration
3. Create directories.
	* Error if the directory already exists
	2.1 Create the case directory. _WorkingDirectory
	2.2 Create the reports directory. _WorkingDirectory/reports/
4. Save configuration. _WorkingDirectory/_WorkingDirectory.garnet_conf.txt

run
---

Run a project (if .garnet_proj.txt exists), or a case.

### Options
* <project dir>
* --max-generation -G <max generation>
	* 1 .. g: Set the max generation. If not set, the value specified by the configuration file will be used.
	
### Flow

1. If a case,
	1. Load a configuration file from _ProjectName/_ProjectName.garnet_conf.txt
		* Error if the file does not exist.
	2. Override configurations by command line arguments.
		* _MaxGeneration
		* _InitialGeneration
	3. Find the last result to determine the generation number to continue.	
		* .garnet_cp.txt
		* 000000/generation.000000.txt
		* or generation 0.
	4. Load or create initial generation.
	5. Start evolution process.
2. If a project,
	1. Load a project configuration file from _ProjectName/_ProjectName.garnet_proj.txt
		* Error if the file does not exist.
	2. Override configurations by command line arguments.
		* _MaxGeneration
		* _InitialGeneration
	
update
------

Modify configurations of a project.

### Options
* <project dir>


clean
-----

Remove intermediate information of a project (if .garnet_proj.txt exists), or a case.

For a case:

* <case>/.garnet_cp.txt
* <case>/trace.------.txt
* <case>/<generation>/.garnet_result_A_I0000_C00_T000.png

For a project:

* Remove same files for a case for all cases under the project.

### Options
* <project dir>
	
### Flow

1. If a case,
	1. Load a configuration file from _ProjectName/_ProjectName.garnet_conf.txt
		* Error if the file does not exist.
	2. For all generation directories to remove following files in the directories.
		* <case>/<generation>/.garnet_result_A_I0000_C00_T000.png
	3. Remove following files from the case directory.
		* <case>/.garnet_cp.txt
		* <case>/trace.------.txt

distclean
---------

In addition to 'clean' command,
remove all generated information of a project (if .garnet_proj.txt exists), or a case.

For a case:

* <case>/<generation>/generation.000000.txt
* <case>/<generation> (directories)

For a project:

* Remove same files for a case for all cases under the project.
* <proj>/reports/*
* <proj>/index.html

### Options
* <project dir>

report
------

Make reports.

### Options
* <project dir>
* -r <report types>
	* <report types> must be one or more following strings concatinated by ','
	  {test, fitness, front, filters, intermediate}

archive
-------

clean and zip data.

### Options
* <project dir>

help
----

### Options
none.


Project
=======

	<Project Name>/
		+---<Project Name>.garnet_proj.txt [in]
		+---<Project Name>.garnet_conf.txt [in]
		+---images/  [in]
		+---reports/ [out]
		+---index.html [out]
		+---r00_k00/ [in]
		|		+---<Case Name>.garnet_conf.txt [in]
		|		+---.garnet_cp.txt   [out]
		|		+---<Case Name>.csv [out]
		|       +---reports/ [in]
		|		|		+---index.html [out]
		|		|		+---<Case Name>_g000000_i0000_c00.html [out]
		|		|		+---<Case Name>_g000000_i0000_c00.graphml [out]
		|		|		+---g000000_i0000_c00/ [out]
		|		|				+---values.csv [out]
		|		|				+---n000000.png [out]
		|		|				+--- ... [out]
		|		+---000000/ [out]
		|		|		+---generation.000000.txt [out]
		|		|		+---.garnet_result_A_I0000_C00_T000.png [out]
		|		|		+--- ...
		|		+---000001/
		|		|		+--- ...
		|		...
		+---r00_k01/
		|		+--- ...
		+--- ...
		+---r01_k00/
		|		+--- ...
		+--- ...

Case
====
	<Case Name>/ [in]
		+---<Case Name>.garnet_conf.txt [in]
		+---.garnet_cp.txt   [out]
		+---<Case Name>.csv [out]
		+---reports/ [in]
		|		+---index.html [out]
		+---000000/ [out]
		|		+---generation.000000.txt [out]
		|		+---.garnet_result_A_I0000_C00_T000.png [out]
		|		+--- ...
		+---000001/
		|		+--- ...
		...


Reports
=======

Changes of Fitness
------------------

### Output
* Project Fitness Data (CSV) --> <proj>/reports/fitness_average.csv
	* Generation#
	* Average Best Individual's Fitness [0]
	* Average Best Individual's Fitness [1]
	* ..
	* Average Rank 1 Average Fitness [0]
	* Average Rank 1 Average Fitness [1]
	* ..
	* Average All Average Fitness [0]
	* Average All Average Fitness [1]
	* ..
* Case Fitness Data (CSV) --> <case>/reports/fitness.csv
	* Generation#
	* Best Individual's Fitness [0]
	* Best Individual's Fitness [1]
	* ..
	* Rank 1 Average Fitness [0]
	* Rank 1 Average Fitness [1]
	* ..
	* All Average Fitness [0]
	* All Average Fitness [1]
	* ..
* Graph (PNG)
	* X axis: Generations
	* Y axis: A fitness.

### Requirements
* Random cases: Average or Single
* Generations: All
* Individuals: All, or Rank 1 
* Objectives: One selected.

### Data source
* <case>/000000/generation.000000.txt [out]
	* Individual
	* Rank
	* FitnessV

### Procedure

1. Load the configuration.
2. Determine a generation range for the finding. ([-g, -G] or [0, the last])
3. For each generation, load generaiton.
4. Output data.
	4.1 Find the best individual, which is the closest to the utopia point. Write its data.
	4.2 Average rank 1 individuals. Write its data.
	4.3 Average all individuals. Write its data.

Changes of the number of IV Filters
-----------------------------------

### Output
* Graph (PNG)
	* X axis: Generations
	* Y axis: The number of IV filters.
	* Layer:  IV Tree, IV Graph, PP Graph.

### Requirements
* Random cases: Average or Single
* Generations: All
* Individuals: All, or Rank 1 
* Objectives: (n/a)

### Data source
* <case>/000000/generation.000000.txt [out]
	* Individual
	* Rank
	* Vertices


Motion of Pareto Front
----------------------

### Output
* Graph (PNG)
	* X axis: Objective #1
	* Y axis: Objective #2
	* Layer:  Generations.

### Requirements
* Random cases: Single
* Generations: Selection (i.e. every 1000 gen)
* Individuals: Rank 1
* Objectives: Two selected.

### Data source
* <case>/000000/generation.000000.txt [out]
	* Individual
	* Rank
	* FitnessV


Test Results (test)
-------------------

### Output
* Filtered Images (PNG)
	* Images which are resulted by filtering TRAINING data with the generated tree. --> repots/g000000_i0000/test_c00_t00.png
	* Images which are resulted by filtering TEST data with the generated tree. --> repots/g000000_i0000/test_c00_u00.png
	* Result should contains the results of IV Tree, Raw fitness, and Fitness Vector.
* Filtered Values (CSV) --> <case>/reports/g000000_i0000/test_values.csv
	* Values which are resulted by filtering TRAINING data with the generated tree.
	* Values which are resulted by filtering TEST data with the generated tree.
	* Result should contains the results of IV Tree, Raw fitness, and Fitness Vector.
		* Task/Test#.
		* IV Tree [0]
		* IV Tree [1]
		* ..
		* Raw Fitness [0]
		* Raw Fitness [1]
		* ..
		* Fitness Vector [0]
		* Fitness Vector [1]
		* ..
* Report (HTML) --> <case>/reports/g000000_i0000/test_report.html
	* Readable report containing the materials above.

### Requirements
* Random cases: Single
* Generations: Single (typically, the last generation.)
* Individuals: Single (typically, the best of the last generation. the best is the nearest one by the utopia point.)
* Objectives: All

### Data source
* <case>/000000/generation.000000.txt [out]
	* Individual
	* Rank        (to determine the best individual)
	* FitnessV    (to determine the best individual)
	* Chromosomes

### Procedure

1. Load the configuration.
2. Load a generation. (-g Xxxx or search the last generation)
3. Find the best individual, which is the closest to the utopia point.
4. Evaluate the individual with GPEngine by enabling EVALUATE_TESTS flag.
5. Save results.
	

Intermediate results of a Tree
------------------------------

### Output
* Graph ML (.graphml)       --> <case>/reports/g000000_i0000_c00/<Case Name>_g000000_i0000_c00.graphml
* Intermediate Images (PNG) --> <case>/reports/g000000_i0000_c00/n00000_t000.png
* Intermediate Values (CSV) --> <case>/reports/g000000_i0000_c00/intermediate.csv
* Report (HTML)             --> <case>/reports/g000000_i0000_c00/<Case Name>_g000000_i0000_c00.html
	* Readable report containing the intermediate images and values.
	* Node connections should be traced by clicking link.
	* node N (op) --> node M (op) (click to go to node M)
	    image image image image image (80 x h, click to enlarge)
		value value value value value <-- table
	* node N has anchor "#nodeN".

### Requirements
* Random cases: Single
* Generations: Single (typically, the last generation.)
* Individuals: Single (typically, the best of the last generation. the best is the nearest one by the utopia point.)
* Objectives: (n/a)

### Data source
* <case>/000000/generation.000000.txt [out]
	* Individual
	* Rank        (to determine the best individual)
	* FitnessV    (to determine the best individual)
	* Chromosomes


Configuration File
==================

Project Configurations (.garnet_proj.txt)
----------------------

### MaxGeneration : Integer

### CrossValidation : Integer

### RandomCases : Integer

### Scenario : String

An execution scenario.

Scenario  run r00k00 -G 1000
Scenario  clean r00k00
Scenario  report r00k00 -g 1000
Scenario  run r00k01 -G 1000
Scenario  clean r00k01
Scenario  report r00k01 -g 1000
Scenario  run r01k00 -G 1000
Scenario  clean r01k00
Scenario  report r01k00 -g 1000
Scenario  run r01k01 -G 1000
Scenario  clean r01k01
Scenario  report r01k01 -g 1000
Scenario  run r00k00 -G 2000
Scenario  clean r00k00
Scenario  report r00k00 -g 2000
...

* Multiple: Yes

### GenerationInterleave : Integer

### ReportParetoFront : Bool

### ReportFitness : Bool

### ReportFilterCount : Bool

### ReportGeneratedTree : Bool

### ReportTreeDetail : Bool




Control Flow
============

1. Global dispatch {newproj, newcase, run, update, report, clean, distclean, archive, help}
1. 
2. new
	2.1 Create cases.

Command Line Arguments.
-------------------------

### _Project (no name) : string

A project name or a configuration file. Mandatory.
It can be relative path.

e.g.
1. ExtractFlower
2. ExtractFlower.garnet.txt

1. If the command is newproj, _Project must contain the extension.

### _Directory (d) : string

A name of the working directory. Optional.
e.g. ExtractFlower

### _ReportTypes (r) : string

Report types.

### _Src0, ..., _Src9 (0, ..., 9) : string

### _MaxGeneration (G) : integer

### _InitialGeneration (g) : integer

### _Input (i) : string

### _Module (m) : string

### _Output (o) : string

### _RandomSeed (s) : integer

### _Verbose (v) : boolean

### _Trees (t) : string

### _Dictionaries (a) : string

### _CsvFileName (c) : string

### _ResultFileName (f) : string

### _SummaryFileName (h) : string

### _SizeX (x) : integer

### _SizeY (y) : integer

### _Trace (T) : string


Derived arguments.
------------------

### _ProjectName

The file name part (without directory and extension) of _Project.

### _WorkingDirectory : string

A name of the working directory.

1. If _Directory is specified, it will be used.
2. Otherwise, _ProjectName will be used.

### _CurrentDirectory : string

The current directory.

### _IsProject (boolean)

True if *.garnet_proj.txt exists in the _WorkingDirectory directory.

